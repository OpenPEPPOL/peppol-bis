<?xml version="1.0" encoding="UTF-8"?>
<project name="PEPPOL-BIS" basedir="." default="compile">

    <property name="agent.name" value="Manual generated"/>
    <!-- build.number is a property set by the build server (TeamCity) -->
    <property name="build.number" value="DEV"/>
    <property name="version.number" value="x.x.x.${build.number}"/>
    <echo message="##teamcity[buildNumber '${version.number}']"/>
    <!-- Format of version.releaseDate must be yyyy-mm-dd -->
    <property name="version.releaseDate" value="2015-09-15"/>

    <property name="target.xslt" value="../target/XSLT"/>

    <taskdef resource="net/sf/antcontrib/antcontrib.properties">
        <classpath>
            <pathelement location="lib/ant-contrib-1.0b3.jar"/>
        </classpath>
    </taskdef>

    <target name="clean">
        <delete dir="../target"/>
    </target>

    <target name="init">
        <mkdir dir="${target.xslt}"/>
    </target>

    <target name="injectVersionNumber">
        <replaceregexp file="Build/iso_schematron_skeleton_oioubl.xsl"
                       match="name=&#34;dateRelease&#34; select=&#34;.*?'&#34;"
                       replace="name=&#34;dateRelease&#34; select=&#34;', ${version.releaseDate}, Version ${version.number}'&#34;"
                       byline="true"/>
    </target>


    <target name="compile" depends="clean, init">
        <foreach target="compileDocumentType" param="documentType">
            <path>
                <dirset dir="../2.0/Documents">
                    <include name="*"/>
                </dirset>
            </path>
        </foreach>
        <!--<exec dir="Build" executable="cmd">-->
        <!--<arg value="/c"/>-->
        <!--<arg value="BuildAll.cmd"/>-->
        <!--</exec>-->
    </target>

    <target name="compileDocumentType" depends="dir.check" if="dir.exists">
        <basename property="baseDocumentType" file="${documentType}"/>
        <!--<echo message="${documentType}"/>-->
        <echo message="##teamcity[compilationStarted compiler='${baseDocumentType}']"/>
        <foreach target="compileSchFile" param="schFile">
            <path>
                <fileset dir="${documentType}/Schematron/">
                    <include name="*/*.sch"/>
                </fileset>
            </path>
        </foreach>

        <echo message="##teamcity[compilationFinished compiler='${baseDocumentType}']"/>
    </target>

    <target name="compileSchFile">
        <basename property="baseName" file="${schFile}" suffix=".sch"/>
        <echo message="SCH: ${schFile}"/>

        <java jar="Saxon-HE-9.5.1-8.jar"
              fork="true"
              failonerror="true"
              maxmemory="2048m"
              resultproperty="errorCode">
            <arg value="-s:${schFile}"/>
            <arg value="-xsl:iso-schematron-xslt2/iso_dsdl_include.xsl"/>
            <arg value="-o:${target.xslt}/${baseName}.step1.xsl"/>
            <jvmarg line="-Xmx2048m"/>
        </java>

        <echo message="SCH: Staring step 2..."/>
        <java jar="Saxon-HE-9.5.1-8.jar"
              fork="true"
              failonerror="true"
              maxmemory="2048m"
              resultproperty="errorCode">
            <arg value="-s:${target.xslt}/${baseName}.step1.xsl"/>
            <arg value="-xsl:iso-schematron-xslt2/iso_abstract_expand.xsl"/>
            <arg value="-o:${target.xslt}/${baseName}.step2.xsl"/>
            <jvmarg line="-Xmx2048m"/>
        </java>

        <!--java -Xmx$memory -jar script/Saxon-HE-9.5.1-8.jar -warnings:silent -quit:on \-->
        <!--<!-&#45;&#45;s:target/XSLT/$rootname.step2.xsl \&ndash;&gt;-->
        <!--<!-&#45;&#45;xsl:script/iso-schematron-xslt2/iso_schematron_skeleton_for_saxon.xsl \&ndash;&gt;-->
        <!--<!-&#45;&#45;o:target/XSLT/$rootname.step3.xsl \&ndash;&gt;-->

        <echo message="SCH: Staring step 3..."/>
        <java jar="Saxon-HE-9.5.1-8.jar"
              fork="true"
              failonerror="true"
              maxmemory="2048m"
              resultproperty="errorCode">
            <arg value="-s:${target.xslt}/${baseName}.step2.xsl"/>
            <arg value="-xsl:iso-schematron-xslt2/iso_schematron_skeleton_for_saxon.xsl"/>
            <arg value="-o:${target.xslt}/${baseName}.step3.xsl"/>
            <jvmarg line="-Xmx2048m"/>
        </java>

        <move file="${target.xslt}/${baseName}.step3.xsl" tofile="${target.xslt}/${baseName}.xsl"/>
        <delete file="${target.xslt}/${baseName}.step1.xsl"/>
        <delete file="${target.xslt}/${baseName}.step2.xsl"/>
    </target>

    <target name="dir.check">
        <condition property="dir.exists">
            <available file="${documentType}/Schematron" type="dir"/>
        </condition>
    </target>

    <target name="makeZip" depends="clean, compile" description="Make XIP for release">
        <exec executable="cmd">
            <arg value="/c"/>
            <arg value="release.cmd"/>
        </exec>

        <!-- Set the version information by replacement -->
        <!--<replaceregexp match="##version.number##"-->
        <!--replace="${version.number}">-->
        <!--<fileset dir="zip-content/Stylesheets" includes="**/*.xsl"/>-->
        <!--</replaceregexp>-->

        <zip destfile="OIOUBL_Schematron_${version.releaseDate}_v${version.number}.zip" basedir="zip-content"/>
        <delete dir="zip-content"/>
    </target>

    <target name="test" depends="compile" description="Run all tests">
        <!-- Run tool -->
        <exec dir="test-tools" executable="cmd">
            <arg value="/c"/>
            <arg value="runAllTests.cmd"/>
        </exec>

        <!--Check if errors exists -->
        <fileset id="matches" dir="test-tools" includes="test-log.txt">
            <contains text="ERROR:"/>
        </fileset>

        <fail message="Found ERRORS in test output">
            <condition>
                <resourcecount when="greater" count="0" refid="matches"/>
            </condition>
        </fail>
    </target>

    <!-- build-all is intended for build server. -->
    <target name="build-all" depends="clean, compile, test, makeZip"/>

</project>
